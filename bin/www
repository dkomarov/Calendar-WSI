#!/usr/bin/env node
'use strict';

/**
 * module dependencies.
 */

var app = require('../app');
var debug = require('debug')('appointmentsystem:server');
const env = process.env.NODE_ENV ? process.env.NODE_ENV : "development" || "production";
var socket = require('socket.io')
require('dotenv').config()

const port = process.env.PORT;
const host = process.env.HOST;
const live = process.env.LIVE;


/**
 * get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

var io = socket(server);

/**
 * listen on provided port, on all network interfaces.
 */
//var server = http.createServer(app);
var server = app.listen(port, function(){
  if (env != 'production') {
  console.log(`\nServer is running in ${env}. To connect, go to: http://${host}\n`);
  } else {
    console.log(`\nServer is running in ${env}. To connect, go to: http://${live}\n`);
  }
})

server.on('error', onError);
server.on('listening', onListening);

var io = socket(server);

// establish socket connection on back-end
// io.on('connection', (socket) => {
//   console.log('socket connected', socket.id);
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}